// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fserver_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_message_5fserver_2eproto_metadata_getter(int index);
namespace message_server_api {
class add_message_request;
struct add_message_requestDefaultTypeInternal;
extern add_message_requestDefaultTypeInternal _add_message_request_default_instance_;
class add_message_response;
struct add_message_responseDefaultTypeInternal;
extern add_message_responseDefaultTypeInternal _add_message_response_default_instance_;
class poll_message_request;
struct poll_message_requestDefaultTypeInternal;
extern poll_message_requestDefaultTypeInternal _poll_message_request_default_instance_;
class poll_message_response;
struct poll_message_responseDefaultTypeInternal;
extern poll_message_responseDefaultTypeInternal _poll_message_response_default_instance_;
class register_client_request;
struct register_client_requestDefaultTypeInternal;
extern register_client_requestDefaultTypeInternal _register_client_request_default_instance_;
class register_client_response;
struct register_client_responseDefaultTypeInternal;
extern register_client_responseDefaultTypeInternal _register_client_response_default_instance_;
}  // namespace message_server_api
PROTOBUF_NAMESPACE_OPEN
template<> ::message_server_api::add_message_request* Arena::CreateMaybeMessage<::message_server_api::add_message_request>(Arena*);
template<> ::message_server_api::add_message_response* Arena::CreateMaybeMessage<::message_server_api::add_message_response>(Arena*);
template<> ::message_server_api::poll_message_request* Arena::CreateMaybeMessage<::message_server_api::poll_message_request>(Arena*);
template<> ::message_server_api::poll_message_response* Arena::CreateMaybeMessage<::message_server_api::poll_message_response>(Arena*);
template<> ::message_server_api::register_client_request* Arena::CreateMaybeMessage<::message_server_api::register_client_request>(Arena*);
template<> ::message_server_api::register_client_response* Arena::CreateMaybeMessage<::message_server_api::register_client_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message_server_api {

// ===================================================================

class register_client_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_server_api.register_client_request) */ {
 public:
  inline register_client_request() : register_client_request(nullptr) {}
  virtual ~register_client_request();
  explicit constexpr register_client_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_client_request(const register_client_request& from);
  register_client_request(register_client_request&& from) noexcept
    : register_client_request() {
    *this = ::std::move(from);
  }

  inline register_client_request& operator=(const register_client_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_client_request& operator=(register_client_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_client_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_client_request* internal_default_instance() {
    return reinterpret_cast<const register_client_request*>(
               &_register_client_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(register_client_request& a, register_client_request& b) {
    a.Swap(&b);
  }
  inline void Swap(register_client_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_client_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_client_request* New() const final {
    return CreateMaybeMessage<register_client_request>(nullptr);
  }

  register_client_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_client_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_client_request& from);
  void MergeFrom(const register_client_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_client_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_server_api.register_client_request";
  }
  protected:
  explicit register_client_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferedClientIdFieldNumber = 1,
  };
  // uint64 prefered_client_id = 1;
  void clear_prefered_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 prefered_client_id() const;
  void set_prefered_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prefered_client_id() const;
  void _internal_set_prefered_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:message_server_api.register_client_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prefered_client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fserver_2eproto;
};
// -------------------------------------------------------------------

class register_client_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_server_api.register_client_response) */ {
 public:
  inline register_client_response() : register_client_response(nullptr) {}
  virtual ~register_client_response();
  explicit constexpr register_client_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_client_response(const register_client_response& from);
  register_client_response(register_client_response&& from) noexcept
    : register_client_response() {
    *this = ::std::move(from);
  }

  inline register_client_response& operator=(const register_client_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_client_response& operator=(register_client_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_client_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_client_response* internal_default_instance() {
    return reinterpret_cast<const register_client_response*>(
               &_register_client_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(register_client_response& a, register_client_response& b) {
    a.Swap(&b);
  }
  inline void Swap(register_client_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_client_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_client_response* New() const final {
    return CreateMaybeMessage<register_client_response>(nullptr);
  }

  register_client_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_client_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_client_response& from);
  void MergeFrom(const register_client_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_client_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_server_api.register_client_response";
  }
  protected:
  explicit register_client_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // uint64 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:message_server_api.register_client_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fserver_2eproto;
};
// -------------------------------------------------------------------

class add_message_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_server_api.add_message_request) */ {
 public:
  inline add_message_request() : add_message_request(nullptr) {}
  virtual ~add_message_request();
  explicit constexpr add_message_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  add_message_request(const add_message_request& from);
  add_message_request(add_message_request&& from) noexcept
    : add_message_request() {
    *this = ::std::move(from);
  }

  inline add_message_request& operator=(const add_message_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_message_request& operator=(add_message_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const add_message_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const add_message_request* internal_default_instance() {
    return reinterpret_cast<const add_message_request*>(
               &_add_message_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(add_message_request& a, add_message_request& b) {
    a.Swap(&b);
  }
  inline void Swap(add_message_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_message_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_message_request* New() const final {
    return CreateMaybeMessage<add_message_request>(nullptr);
  }

  add_message_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_message_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const add_message_request& from);
  void MergeFrom(const add_message_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_message_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_server_api.add_message_request";
  }
  protected:
  explicit add_message_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint64 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:message_server_api.add_message_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fserver_2eproto;
};
// -------------------------------------------------------------------

class add_message_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_server_api.add_message_response) */ {
 public:
  inline add_message_response() : add_message_response(nullptr) {}
  virtual ~add_message_response();
  explicit constexpr add_message_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  add_message_response(const add_message_response& from);
  add_message_response(add_message_response&& from) noexcept
    : add_message_response() {
    *this = ::std::move(from);
  }

  inline add_message_response& operator=(const add_message_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_message_response& operator=(add_message_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const add_message_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const add_message_response* internal_default_instance() {
    return reinterpret_cast<const add_message_response*>(
               &_add_message_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(add_message_response& a, add_message_response& b) {
    a.Swap(&b);
  }
  inline void Swap(add_message_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_message_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_message_response* New() const final {
    return CreateMaybeMessage<add_message_response>(nullptr);
  }

  add_message_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_message_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const add_message_response& from);
  void MergeFrom(const add_message_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_message_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_server_api.add_message_response";
  }
  protected:
  explicit add_message_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // uint64 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:message_server_api.add_message_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fserver_2eproto;
};
// -------------------------------------------------------------------

class poll_message_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_server_api.poll_message_request) */ {
 public:
  inline poll_message_request() : poll_message_request(nullptr) {}
  virtual ~poll_message_request();
  explicit constexpr poll_message_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  poll_message_request(const poll_message_request& from);
  poll_message_request(poll_message_request&& from) noexcept
    : poll_message_request() {
    *this = ::std::move(from);
  }

  inline poll_message_request& operator=(const poll_message_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline poll_message_request& operator=(poll_message_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const poll_message_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const poll_message_request* internal_default_instance() {
    return reinterpret_cast<const poll_message_request*>(
               &_poll_message_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(poll_message_request& a, poll_message_request& b) {
    a.Swap(&b);
  }
  inline void Swap(poll_message_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(poll_message_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline poll_message_request* New() const final {
    return CreateMaybeMessage<poll_message_request>(nullptr);
  }

  poll_message_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<poll_message_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const poll_message_request& from);
  void MergeFrom(const poll_message_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(poll_message_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_server_api.poll_message_request";
  }
  protected:
  explicit poll_message_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastPolledMessageIdFieldNumber = 1,
  };
  // uint64 last_polled_message_id = 1;
  void clear_last_polled_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_polled_message_id() const;
  void set_last_polled_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_polled_message_id() const;
  void _internal_set_last_polled_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:message_server_api.poll_message_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_polled_message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fserver_2eproto;
};
// -------------------------------------------------------------------

class poll_message_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_server_api.poll_message_response) */ {
 public:
  inline poll_message_response() : poll_message_response(nullptr) {}
  virtual ~poll_message_response();
  explicit constexpr poll_message_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  poll_message_response(const poll_message_response& from);
  poll_message_response(poll_message_response&& from) noexcept
    : poll_message_response() {
    *this = ::std::move(from);
  }

  inline poll_message_response& operator=(const poll_message_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline poll_message_response& operator=(poll_message_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const poll_message_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const poll_message_response* internal_default_instance() {
    return reinterpret_cast<const poll_message_response*>(
               &_poll_message_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(poll_message_response& a, poll_message_response& b) {
    a.Swap(&b);
  }
  inline void Swap(poll_message_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(poll_message_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline poll_message_response* New() const final {
    return CreateMaybeMessage<poll_message_response>(nullptr);
  }

  poll_message_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<poll_message_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const poll_message_response& from);
  void MergeFrom(const poll_message_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(poll_message_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_server_api.poll_message_response";
  }
  protected:
  explicit poll_message_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_5fserver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kMessageIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
  };
  // repeated string text = 1;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // repeated uint64 message_id = 2;
  int message_id_size() const;
  private:
  int _internal_message_id_size() const;
  public:
  void clear_message_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_message_id() const;
  void _internal_add_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_message_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id(int index) const;
  void set_message_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      message_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_message_id();

  // repeated uint64 client_id = 3;
  int client_id_size() const;
  private:
  int _internal_client_id_size() const;
  public:
  void clear_client_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_client_id() const;
  void _internal_add_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_client_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id(int index) const;
  void set_client_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      client_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_client_id();

  // @@protoc_insertion_point(class_scope:message_server_api.poll_message_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > message_id_;
  mutable std::atomic<int> _message_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > client_id_;
  mutable std::atomic<int> _client_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// register_client_request

// uint64 prefered_client_id = 1;
inline void register_client_request::clear_prefered_client_id() {
  prefered_client_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 register_client_request::_internal_prefered_client_id() const {
  return prefered_client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 register_client_request::prefered_client_id() const {
  // @@protoc_insertion_point(field_get:message_server_api.register_client_request.prefered_client_id)
  return _internal_prefered_client_id();
}
inline void register_client_request::_internal_set_prefered_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prefered_client_id_ = value;
}
inline void register_client_request::set_prefered_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prefered_client_id(value);
  // @@protoc_insertion_point(field_set:message_server_api.register_client_request.prefered_client_id)
}

// -------------------------------------------------------------------

// register_client_response

// uint64 client_id = 1;
inline void register_client_response::clear_client_id() {
  client_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 register_client_response::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 register_client_response::client_id() const {
  // @@protoc_insertion_point(field_get:message_server_api.register_client_response.client_id)
  return _internal_client_id();
}
inline void register_client_response::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_id_ = value;
}
inline void register_client_response::set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:message_server_api.register_client_response.client_id)
}

// -------------------------------------------------------------------

// add_message_request

// uint64 client_id = 1;
inline void add_message_request::clear_client_id() {
  client_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 add_message_request::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 add_message_request::client_id() const {
  // @@protoc_insertion_point(field_get:message_server_api.add_message_request.client_id)
  return _internal_client_id();
}
inline void add_message_request::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_id_ = value;
}
inline void add_message_request::set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:message_server_api.add_message_request.client_id)
}

// string text = 2;
inline void add_message_request::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& add_message_request::text() const {
  // @@protoc_insertion_point(field_get:message_server_api.add_message_request.text)
  return _internal_text();
}
inline void add_message_request::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:message_server_api.add_message_request.text)
}
inline std::string* add_message_request::mutable_text() {
  // @@protoc_insertion_point(field_mutable:message_server_api.add_message_request.text)
  return _internal_mutable_text();
}
inline const std::string& add_message_request::_internal_text() const {
  return text_.Get();
}
inline void add_message_request::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void add_message_request::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message_server_api.add_message_request.text)
}
inline void add_message_request::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:message_server_api.add_message_request.text)
}
inline void add_message_request::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message_server_api.add_message_request.text)
}
inline std::string* add_message_request::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* add_message_request::release_text() {
  // @@protoc_insertion_point(field_release:message_server_api.add_message_request.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void add_message_request::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message_server_api.add_message_request.text)
}

// -------------------------------------------------------------------

// add_message_response

// uint64 message_id = 1;
inline void add_message_response::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 add_message_response::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 add_message_response::message_id() const {
  // @@protoc_insertion_point(field_get:message_server_api.add_message_response.message_id)
  return _internal_message_id();
}
inline void add_message_response::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void add_message_response::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:message_server_api.add_message_response.message_id)
}

// -------------------------------------------------------------------

// poll_message_request

// uint64 last_polled_message_id = 1;
inline void poll_message_request::clear_last_polled_message_id() {
  last_polled_message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 poll_message_request::_internal_last_polled_message_id() const {
  return last_polled_message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 poll_message_request::last_polled_message_id() const {
  // @@protoc_insertion_point(field_get:message_server_api.poll_message_request.last_polled_message_id)
  return _internal_last_polled_message_id();
}
inline void poll_message_request::_internal_set_last_polled_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_polled_message_id_ = value;
}
inline void poll_message_request::set_last_polled_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_polled_message_id(value);
  // @@protoc_insertion_point(field_set:message_server_api.poll_message_request.last_polled_message_id)
}

// -------------------------------------------------------------------

// poll_message_response

// repeated string text = 1;
inline int poll_message_response::_internal_text_size() const {
  return text_.size();
}
inline int poll_message_response::text_size() const {
  return _internal_text_size();
}
inline void poll_message_response::clear_text() {
  text_.Clear();
}
inline std::string* poll_message_response::add_text() {
  // @@protoc_insertion_point(field_add_mutable:message_server_api.poll_message_response.text)
  return _internal_add_text();
}
inline const std::string& poll_message_response::_internal_text(int index) const {
  return text_.Get(index);
}
inline const std::string& poll_message_response::text(int index) const {
  // @@protoc_insertion_point(field_get:message_server_api.poll_message_response.text)
  return _internal_text(index);
}
inline std::string* poll_message_response::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:message_server_api.poll_message_response.text)
  return text_.Mutable(index);
}
inline void poll_message_response::set_text(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:message_server_api.poll_message_response.text)
  text_.Mutable(index)->assign(value);
}
inline void poll_message_response::set_text(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:message_server_api.poll_message_response.text)
  text_.Mutable(index)->assign(std::move(value));
}
inline void poll_message_response::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message_server_api.poll_message_response.text)
}
inline void poll_message_response::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message_server_api.poll_message_response.text)
}
inline std::string* poll_message_response::_internal_add_text() {
  return text_.Add();
}
inline void poll_message_response::add_text(const std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message_server_api.poll_message_response.text)
}
inline void poll_message_response::add_text(std::string&& value) {
  text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message_server_api.poll_message_response.text)
}
inline void poll_message_response::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message_server_api.poll_message_response.text)
}
inline void poll_message_response::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message_server_api.poll_message_response.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
poll_message_response::text() const {
  // @@protoc_insertion_point(field_list:message_server_api.poll_message_response.text)
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
poll_message_response::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:message_server_api.poll_message_response.text)
  return &text_;
}

// repeated uint64 message_id = 2;
inline int poll_message_response::_internal_message_id_size() const {
  return message_id_.size();
}
inline int poll_message_response::message_id_size() const {
  return _internal_message_id_size();
}
inline void poll_message_response::clear_message_id() {
  message_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 poll_message_response::_internal_message_id(int index) const {
  return message_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 poll_message_response::message_id(int index) const {
  // @@protoc_insertion_point(field_get:message_server_api.poll_message_response.message_id)
  return _internal_message_id(index);
}
inline void poll_message_response::set_message_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  message_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:message_server_api.poll_message_response.message_id)
}
inline void poll_message_response::_internal_add_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  message_id_.Add(value);
}
inline void poll_message_response::add_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_message_id(value);
  // @@protoc_insertion_point(field_add:message_server_api.poll_message_response.message_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
poll_message_response::_internal_message_id() const {
  return message_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
poll_message_response::message_id() const {
  // @@protoc_insertion_point(field_list:message_server_api.poll_message_response.message_id)
  return _internal_message_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
poll_message_response::_internal_mutable_message_id() {
  return &message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
poll_message_response::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable_list:message_server_api.poll_message_response.message_id)
  return _internal_mutable_message_id();
}

// repeated uint64 client_id = 3;
inline int poll_message_response::_internal_client_id_size() const {
  return client_id_.size();
}
inline int poll_message_response::client_id_size() const {
  return _internal_client_id_size();
}
inline void poll_message_response::clear_client_id() {
  client_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 poll_message_response::_internal_client_id(int index) const {
  return client_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 poll_message_response::client_id(int index) const {
  // @@protoc_insertion_point(field_get:message_server_api.poll_message_response.client_id)
  return _internal_client_id(index);
}
inline void poll_message_response::set_client_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  client_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:message_server_api.poll_message_response.client_id)
}
inline void poll_message_response::_internal_add_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  client_id_.Add(value);
}
inline void poll_message_response::add_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_client_id(value);
  // @@protoc_insertion_point(field_add:message_server_api.poll_message_response.client_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
poll_message_response::_internal_client_id() const {
  return client_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
poll_message_response::client_id() const {
  // @@protoc_insertion_point(field_list:message_server_api.poll_message_response.client_id)
  return _internal_client_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
poll_message_response::_internal_mutable_client_id() {
  return &client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
poll_message_response::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable_list:message_server_api.poll_message_response.client_id)
  return _internal_mutable_client_id();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message_server_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fserver_2eproto
