// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_server.proto

#include "message_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace message_server_api {
constexpr register_client_request::register_client_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefered_client_id_(PROTOBUF_ULONGLONG(0)){}
struct register_client_requestDefaultTypeInternal {
  constexpr register_client_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~register_client_requestDefaultTypeInternal() {}
  union {
    register_client_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_client_requestDefaultTypeInternal _register_client_request_default_instance_;
constexpr register_client_response::register_client_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(PROTOBUF_ULONGLONG(0)){}
struct register_client_responseDefaultTypeInternal {
  constexpr register_client_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~register_client_responseDefaultTypeInternal() {}
  union {
    register_client_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_client_responseDefaultTypeInternal _register_client_response_default_instance_;
constexpr add_message_request::add_message_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(PROTOBUF_ULONGLONG(0)){}
struct add_message_requestDefaultTypeInternal {
  constexpr add_message_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~add_message_requestDefaultTypeInternal() {}
  union {
    add_message_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT add_message_requestDefaultTypeInternal _add_message_request_default_instance_;
constexpr add_message_response::add_message_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_id_(PROTOBUF_ULONGLONG(0)){}
struct add_message_responseDefaultTypeInternal {
  constexpr add_message_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~add_message_responseDefaultTypeInternal() {}
  union {
    add_message_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT add_message_responseDefaultTypeInternal _add_message_response_default_instance_;
constexpr poll_message_request::poll_message_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_polled_message_id_(PROTOBUF_ULONGLONG(0))
  , client_id_(PROTOBUF_ULONGLONG(0)){}
struct poll_message_requestDefaultTypeInternal {
  constexpr poll_message_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~poll_message_requestDefaultTypeInternal() {}
  union {
    poll_message_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT poll_message_requestDefaultTypeInternal _poll_message_request_default_instance_;
constexpr poll_message_response::poll_message_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_()
  , message_id_()
  , _message_id_cached_byte_size_()
  , client_id_()
  , _client_id_cached_byte_size_(){}
struct poll_message_responseDefaultTypeInternal {
  constexpr poll_message_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~poll_message_responseDefaultTypeInternal() {}
  union {
    poll_message_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT poll_message_responseDefaultTypeInternal _poll_message_response_default_instance_;
}  // namespace message_server_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_5fserver_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_5fserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_server_api::register_client_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_server_api::register_client_request, prefered_client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_server_api::register_client_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_server_api::register_client_response, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_server_api::add_message_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_server_api::add_message_request, client_id_),
  PROTOBUF_FIELD_OFFSET(::message_server_api::add_message_request, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_server_api::add_message_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_server_api::add_message_response, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_server_api::poll_message_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_server_api::poll_message_request, last_polled_message_id_),
  PROTOBUF_FIELD_OFFSET(::message_server_api::poll_message_request, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_server_api::poll_message_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_server_api::poll_message_response, text_),
  PROTOBUF_FIELD_OFFSET(::message_server_api::poll_message_response, message_id_),
  PROTOBUF_FIELD_OFFSET(::message_server_api::poll_message_response, client_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::message_server_api::register_client_request)},
  { 6, -1, sizeof(::message_server_api::register_client_response)},
  { 12, -1, sizeof(::message_server_api::add_message_request)},
  { 19, -1, sizeof(::message_server_api::add_message_response)},
  { 25, -1, sizeof(::message_server_api::poll_message_request)},
  { 32, -1, sizeof(::message_server_api::poll_message_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message_server_api::_register_client_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message_server_api::_register_client_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message_server_api::_add_message_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message_server_api::_add_message_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message_server_api::_poll_message_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message_server_api::_poll_message_response_default_instance_),
};

const char descriptor_table_protodef_message_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024message_server.proto\022\022message_server_a"
  "pi\"5\n\027register_client_request\022\032\n\022prefere"
  "d_client_id\030\001 \001(\004\"-\n\030register_client_res"
  "ponse\022\021\n\tclient_id\030\001 \001(\004\"6\n\023add_message_"
  "request\022\021\n\tclient_id\030\001 \001(\004\022\014\n\004text\030\002 \001(\t"
  "\"*\n\024add_message_response\022\022\n\nmessage_id\030\001"
  " \001(\004\"I\n\024poll_message_request\022\036\n\026last_pol"
  "led_message_id\030\001 \001(\004\022\021\n\tclient_id\030\002 \001(\004\""
  "L\n\025poll_message_response\022\014\n\004text\030\001 \003(\t\022\022"
  "\n\nmessage_id\030\002 \003(\004\022\021\n\tclient_id\030\003 \003(\0042\304\002"
  "\n\007storage\022b\n\013add_message\022\'.message_serve"
  "r_api.add_message_request\032(.message_serv"
  "er_api.add_message_response\"\000\022e\n\014poll_me"
  "ssage\022(.message_server_api.poll_message_"
  "request\032).message_server_api.poll_messag"
  "e_response\"\000\022n\n\017register_client\022+.messag"
  "e_server_api.register_client_request\032,.m"
  "essage_server_api.register_client_respon"
  "se\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fserver_2eproto = {
  false, false, 732, descriptor_table_protodef_message_5fserver_2eproto, "message_server.proto", 
  &descriptor_table_message_5fserver_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_message_5fserver_2eproto::offsets,
  file_level_metadata_message_5fserver_2eproto, file_level_enum_descriptors_message_5fserver_2eproto, file_level_service_descriptors_message_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_message_5fserver_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5fserver_2eproto);
  return descriptor_table_message_5fserver_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_5fserver_2eproto(&descriptor_table_message_5fserver_2eproto);
namespace message_server_api {

// ===================================================================

class register_client_request::_Internal {
 public:
};

register_client_request::register_client_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message_server_api.register_client_request)
}
register_client_request::register_client_request(const register_client_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefered_client_id_ = from.prefered_client_id_;
  // @@protoc_insertion_point(copy_constructor:message_server_api.register_client_request)
}

void register_client_request::SharedCtor() {
prefered_client_id_ = PROTOBUF_ULONGLONG(0);
}

register_client_request::~register_client_request() {
  // @@protoc_insertion_point(destructor:message_server_api.register_client_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void register_client_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void register_client_request::ArenaDtor(void* object) {
  register_client_request* _this = reinterpret_cast< register_client_request* >(object);
  (void)_this;
}
void register_client_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void register_client_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void register_client_request::Clear() {
// @@protoc_insertion_point(message_clear_start:message_server_api.register_client_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefered_client_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_client_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 prefered_client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prefered_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* register_client_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_server_api.register_client_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 prefered_client_id = 1;
  if (this->prefered_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_prefered_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_server_api.register_client_request)
  return target;
}

size_t register_client_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_server_api.register_client_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 prefered_client_id = 1;
  if (this->prefered_client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prefered_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void register_client_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_server_api.register_client_request)
  GOOGLE_DCHECK_NE(&from, this);
  const register_client_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<register_client_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_server_api.register_client_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_server_api.register_client_request)
    MergeFrom(*source);
  }
}

void register_client_request::MergeFrom(const register_client_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_server_api.register_client_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefered_client_id() != 0) {
    _internal_set_prefered_client_id(from._internal_prefered_client_id());
  }
}

void register_client_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_server_api.register_client_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_client_request::CopyFrom(const register_client_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_server_api.register_client_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_client_request::IsInitialized() const {
  return true;
}

void register_client_request::InternalSwap(register_client_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(prefered_client_id_, other->prefered_client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata register_client_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class register_client_response::_Internal {
 public:
};

register_client_response::register_client_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message_server_api.register_client_response)
}
register_client_response::register_client_response(const register_client_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:message_server_api.register_client_response)
}

void register_client_response::SharedCtor() {
client_id_ = PROTOBUF_ULONGLONG(0);
}

register_client_response::~register_client_response() {
  // @@protoc_insertion_point(destructor:message_server_api.register_client_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void register_client_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void register_client_response::ArenaDtor(void* object) {
  register_client_response* _this = reinterpret_cast< register_client_response* >(object);
  (void)_this;
}
void register_client_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void register_client_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void register_client_response::Clear() {
// @@protoc_insertion_point(message_clear_start:message_server_api.register_client_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_client_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* register_client_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_server_api.register_client_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_id = 1;
  if (this->client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_server_api.register_client_response)
  return target;
}

size_t register_client_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_server_api.register_client_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void register_client_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_server_api.register_client_response)
  GOOGLE_DCHECK_NE(&from, this);
  const register_client_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<register_client_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_server_api.register_client_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_server_api.register_client_response)
    MergeFrom(*source);
  }
}

void register_client_response::MergeFrom(const register_client_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_server_api.register_client_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
}

void register_client_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_server_api.register_client_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_client_response::CopyFrom(const register_client_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_server_api.register_client_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_client_response::IsInitialized() const {
  return true;
}

void register_client_response::InternalSwap(register_client_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata register_client_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class add_message_request::_Internal {
 public:
};

add_message_request::add_message_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message_server_api.add_message_request)
}
add_message_request::add_message_request(const add_message_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:message_server_api.add_message_request)
}

void add_message_request::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
client_id_ = PROTOBUF_ULONGLONG(0);
}

add_message_request::~add_message_request() {
  // @@protoc_insertion_point(destructor:message_server_api.add_message_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void add_message_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void add_message_request::ArenaDtor(void* object) {
  add_message_request* _this = reinterpret_cast< add_message_request* >(object);
  (void)_this;
}
void add_message_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void add_message_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void add_message_request::Clear() {
// @@protoc_insertion_point(message_clear_start:message_server_api.add_message_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  client_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* add_message_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message_server_api.add_message_request.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* add_message_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_server_api.add_message_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_id = 1;
  if (this->client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_server_api.add_message_request.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_server_api.add_message_request)
  return target;
}

size_t add_message_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_server_api.add_message_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // uint64 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void add_message_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_server_api.add_message_request)
  GOOGLE_DCHECK_NE(&from, this);
  const add_message_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<add_message_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_server_api.add_message_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_server_api.add_message_request)
    MergeFrom(*source);
  }
}

void add_message_request::MergeFrom(const add_message_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_server_api.add_message_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
}

void add_message_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_server_api.add_message_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_message_request::CopyFrom(const add_message_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_server_api.add_message_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_message_request::IsInitialized() const {
  return true;
}

void add_message_request::InternalSwap(add_message_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata add_message_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class add_message_response::_Internal {
 public:
};

add_message_response::add_message_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message_server_api.add_message_response)
}
add_message_response::add_message_response(const add_message_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_ = from.message_id_;
  // @@protoc_insertion_point(copy_constructor:message_server_api.add_message_response)
}

void add_message_response::SharedCtor() {
message_id_ = PROTOBUF_ULONGLONG(0);
}

add_message_response::~add_message_response() {
  // @@protoc_insertion_point(destructor:message_server_api.add_message_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void add_message_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void add_message_response::ArenaDtor(void* object) {
  add_message_response* _this = reinterpret_cast< add_message_response* >(object);
  (void)_this;
}
void add_message_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void add_message_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void add_message_response::Clear() {
// @@protoc_insertion_point(message_clear_start:message_server_api.add_message_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* add_message_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* add_message_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_server_api.add_message_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 message_id = 1;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_server_api.add_message_response)
  return target;
}

size_t add_message_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_server_api.add_message_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void add_message_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_server_api.add_message_response)
  GOOGLE_DCHECK_NE(&from, this);
  const add_message_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<add_message_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_server_api.add_message_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_server_api.add_message_response)
    MergeFrom(*source);
  }
}

void add_message_response::MergeFrom(const add_message_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_server_api.add_message_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void add_message_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_server_api.add_message_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_message_response::CopyFrom(const add_message_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_server_api.add_message_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_message_response::IsInitialized() const {
  return true;
}

void add_message_response::InternalSwap(add_message_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_id_, other->message_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata add_message_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class poll_message_request::_Internal {
 public:
};

poll_message_request::poll_message_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message_server_api.poll_message_request)
}
poll_message_request::poll_message_request(const poll_message_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&last_polled_message_id_, &from.last_polled_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&last_polled_message_id_)) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:message_server_api.poll_message_request)
}

void poll_message_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_polled_message_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&last_polled_message_id_)) + sizeof(client_id_));
}

poll_message_request::~poll_message_request() {
  // @@protoc_insertion_point(destructor:message_server_api.poll_message_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void poll_message_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void poll_message_request::ArenaDtor(void* object) {
  poll_message_request* _this = reinterpret_cast< poll_message_request* >(object);
  (void)_this;
}
void poll_message_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void poll_message_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void poll_message_request::Clear() {
// @@protoc_insertion_point(message_clear_start:message_server_api.poll_message_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&last_polled_message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&last_polled_message_id_)) + sizeof(client_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* poll_message_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 last_polled_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_polled_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* poll_message_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_server_api.poll_message_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 last_polled_message_id = 1;
  if (this->last_polled_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_last_polled_message_id(), target);
  }

  // uint64 client_id = 2;
  if (this->client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_server_api.poll_message_request)
  return target;
}

size_t poll_message_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_server_api.poll_message_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 last_polled_message_id = 1;
  if (this->last_polled_message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_polled_message_id());
  }

  // uint64 client_id = 2;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void poll_message_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_server_api.poll_message_request)
  GOOGLE_DCHECK_NE(&from, this);
  const poll_message_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<poll_message_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_server_api.poll_message_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_server_api.poll_message_request)
    MergeFrom(*source);
  }
}

void poll_message_request::MergeFrom(const poll_message_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_server_api.poll_message_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_polled_message_id() != 0) {
    _internal_set_last_polled_message_id(from._internal_last_polled_message_id());
  }
  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
}

void poll_message_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_server_api.poll_message_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void poll_message_request::CopyFrom(const poll_message_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_server_api.poll_message_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool poll_message_request::IsInitialized() const {
  return true;
}

void poll_message_request::InternalSwap(poll_message_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(poll_message_request, client_id_)
      + sizeof(poll_message_request::client_id_)
      - PROTOBUF_FIELD_OFFSET(poll_message_request, last_polled_message_id_)>(
          reinterpret_cast<char*>(&last_polled_message_id_),
          reinterpret_cast<char*>(&other->last_polled_message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata poll_message_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class poll_message_response::_Internal {
 public:
};

poll_message_response::poll_message_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  text_(arena),
  message_id_(arena),
  client_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message_server_api.poll_message_response)
}
poll_message_response::poll_message_response(const poll_message_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      text_(from.text_),
      message_id_(from.message_id_),
      client_id_(from.client_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message_server_api.poll_message_response)
}

void poll_message_response::SharedCtor() {
}

poll_message_response::~poll_message_response() {
  // @@protoc_insertion_point(destructor:message_server_api.poll_message_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void poll_message_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void poll_message_response::ArenaDtor(void* object) {
  poll_message_response* _this = reinterpret_cast< poll_message_response* >(object);
  (void)_this;
}
void poll_message_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void poll_message_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void poll_message_response::Clear() {
// @@protoc_insertion_point(message_clear_start:message_server_api.poll_message_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.Clear();
  message_id_.Clear();
  client_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* poll_message_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_text();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message_server_api.poll_message_response.text"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_message_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_message_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_client_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_client_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* poll_message_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_server_api.poll_message_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string text = 1;
  for (int i = 0, n = this->_internal_text_size(); i < n; i++) {
    const auto& s = this->_internal_text(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_server_api.poll_message_response.text");
    target = stream->WriteString(1, s, target);
  }

  // repeated uint64 message_id = 2;
  {
    int byte_size = _message_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_message_id(), byte_size, target);
    }
  }

  // repeated uint64 client_id = 3;
  {
    int byte_size = _client_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_client_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_server_api.poll_message_response)
  return target;
}

size_t poll_message_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_server_api.poll_message_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string text = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(text_.size());
  for (int i = 0, n = text_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      text_.Get(i));
  }

  // repeated uint64 message_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->message_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _message_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 client_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->client_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _client_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void poll_message_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_server_api.poll_message_response)
  GOOGLE_DCHECK_NE(&from, this);
  const poll_message_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<poll_message_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_server_api.poll_message_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_server_api.poll_message_response)
    MergeFrom(*source);
  }
}

void poll_message_response::MergeFrom(const poll_message_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_server_api.poll_message_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_.MergeFrom(from.text_);
  message_id_.MergeFrom(from.message_id_);
  client_id_.MergeFrom(from.client_id_);
}

void poll_message_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_server_api.poll_message_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void poll_message_response::CopyFrom(const poll_message_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_server_api.poll_message_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool poll_message_response::IsInitialized() const {
  return true;
}

void poll_message_response::InternalSwap(poll_message_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.InternalSwap(&other->text_);
  message_id_.InternalSwap(&other->message_id_);
  client_id_.InternalSwap(&other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata poll_message_response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message_server_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message_server_api::register_client_request* Arena::CreateMaybeMessage< ::message_server_api::register_client_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_server_api::register_client_request >(arena);
}
template<> PROTOBUF_NOINLINE ::message_server_api::register_client_response* Arena::CreateMaybeMessage< ::message_server_api::register_client_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_server_api::register_client_response >(arena);
}
template<> PROTOBUF_NOINLINE ::message_server_api::add_message_request* Arena::CreateMaybeMessage< ::message_server_api::add_message_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_server_api::add_message_request >(arena);
}
template<> PROTOBUF_NOINLINE ::message_server_api::add_message_response* Arena::CreateMaybeMessage< ::message_server_api::add_message_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_server_api::add_message_response >(arena);
}
template<> PROTOBUF_NOINLINE ::message_server_api::poll_message_request* Arena::CreateMaybeMessage< ::message_server_api::poll_message_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_server_api::poll_message_request >(arena);
}
template<> PROTOBUF_NOINLINE ::message_server_api::poll_message_response* Arena::CreateMaybeMessage< ::message_server_api::poll_message_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_server_api::poll_message_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
