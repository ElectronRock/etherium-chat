# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import message_server_pb2 as message__server__pb2


class storageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_message = channel.unary_unary(
                '/message_server_api.storage/add_message',
                request_serializer=message__server__pb2.add_message_request.SerializeToString,
                response_deserializer=message__server__pb2.add_message_response.FromString,
                )
        self.poll_message = channel.unary_unary(
                '/message_server_api.storage/poll_message',
                request_serializer=message__server__pb2.poll_message_request.SerializeToString,
                response_deserializer=message__server__pb2.poll_message_response.FromString,
                )
        self.register_client = channel.unary_unary(
                '/message_server_api.storage/register_client',
                request_serializer=message__server__pb2.register_client_request.SerializeToString,
                response_deserializer=message__server__pb2.register_client_response.FromString,
                )


class storageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add_message(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def poll_message(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register_client(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_storageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add_message': grpc.unary_unary_rpc_method_handler(
                    servicer.add_message,
                    request_deserializer=message__server__pb2.add_message_request.FromString,
                    response_serializer=message__server__pb2.add_message_response.SerializeToString,
            ),
            'poll_message': grpc.unary_unary_rpc_method_handler(
                    servicer.poll_message,
                    request_deserializer=message__server__pb2.poll_message_request.FromString,
                    response_serializer=message__server__pb2.poll_message_response.SerializeToString,
            ),
            'register_client': grpc.unary_unary_rpc_method_handler(
                    servicer.register_client,
                    request_deserializer=message__server__pb2.register_client_request.FromString,
                    response_serializer=message__server__pb2.register_client_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'message_server_api.storage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class storage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add_message(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message_server_api.storage/add_message',
            message__server__pb2.add_message_request.SerializeToString,
            message__server__pb2.add_message_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def poll_message(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message_server_api.storage/poll_message',
            message__server__pb2.poll_message_request.SerializeToString,
            message__server__pb2.poll_message_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def register_client(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message_server_api.storage/register_client',
            message__server__pb2.register_client_request.SerializeToString,
            message__server__pb2.register_client_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
